/*
 * (C) Copyright 2017-2017, by Dimitrios Michail and Contributors.
 *
 * JGraphT : a free Java graph-theory library
 *
 * This program and the accompanying materials are dual-licensed under
 * either
 *
 * (a) the terms of the GNU Lesser General Public License version 2.1
 * as published by the Free Software Foundation, or (at your option) any
 * later version.
 *
 * or (per the licensee's choosing)
 *
 * (b) the terms of the Eclipse Public License v1.0 as published by
 * the Eclipse Foundation.
 */
package org.jgrapht.generate;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.graph.IntegerVertexFactory;
import org.jgrapht.graph.SimpleDirectedGraph;
import org.jgrapht.graph.SimpleGraph;
import org.junit.Test;

/**
 * @author Dimitrios Michail
 */
public class KleinbergSmallWorldGraphGeneratorTest
{
    @Test
    public void testBadParameters()
    {
        try {
            new KleinbergSmallWorldGraphGenerator<>(-1, 1, 1, 1);
            fail("Bad parameter");
        } catch (IllegalArgumentException e) {
        }

        try {
            new KleinbergSmallWorldGraphGenerator<>(5, 0, 1, 1);
            fail("Bad parameter");
        } catch (IllegalArgumentException e) {
        }

        try {
            new KleinbergSmallWorldGraphGenerator<>(5, 9, 1, 1);
            fail("Bad parameter");
        } catch (IllegalArgumentException e) {
        }

        try {
            new KleinbergSmallWorldGraphGenerator<>(5, 1, -1, 1);
            fail("Bad parameter");
        } catch (IllegalArgumentException e) {
        }

        try {
            new KleinbergSmallWorldGraphGenerator<>(5, 1, 1, -1);
            fail("Bad parameter");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    public void testUndirected()
    {
        final long seed = 5;

        GraphGenerator<Integer, DefaultEdge, Integer> gen =
            new KleinbergSmallWorldGraphGenerator<>(5, 2, 3, 2, seed);
        Graph<Integer, DefaultEdge> g = new SimpleGraph<>(DefaultEdge.class);
        gen.generateGraph(g, new IntegerVertexFactory(), null);

        int[][] edges = { { 0, 1 }, { 0, 2 }, { 0, 4 }, { 0, 5 }, { 0, 6 }, { 0, 10 }, { 1, 2 },
            { 1, 3 }, { 1, 5 }, { 1, 6 }, { 1, 7 }, { 1, 11 }, { 2, 3 }, { 2, 4 }, { 2, 6 },
            { 2, 7 }, { 2, 8 }, { 2, 12 }, { 3, 4 }, { 3, 5 }, { 3, 7 }, { 3, 8 }, { 3, 9 },
            { 3, 13 }, { 4, 5 }, { 4, 6 }, { 4, 8 }, { 4, 9 }, { 4, 10 }, { 4, 14 }, { 5, 6 },
            { 5, 7 }, { 5, 9 }, { 5, 10 }, { 5, 11 }, { 5, 15 }, { 6, 7 }, { 6, 8 }, { 6, 10 },
            { 6, 11 }, { 6, 12 }, { 6, 16 }, { 7, 8 }, { 7, 9 }, { 7, 11 }, { 7, 12 }, { 7, 13 },
            { 7, 17 }, { 8, 9 }, { 8, 10 }, { 8, 12 }, { 8, 13 }, { 8, 14 }, { 8, 18 }, { 9, 10 },
            { 9, 11 }, { 9, 13 }, { 9, 14 }, { 9, 15 }, { 9, 19 }, { 10, 11 }, { 10, 12 },
            { 10, 14 }, { 10, 15 }, { 10, 16 }, { 10, 20 }, { 11, 12 }, { 11, 13 }, { 11, 15 },
            { 11, 16 }, { 11, 17 }, { 11, 21 }, { 12, 13 }, { 12, 14 }, { 12, 16 }, { 12, 17 },
            { 12, 18 }, { 12, 22 }, { 13, 14 }, { 13, 15 }, { 13, 17 }, { 13, 18 }, { 13, 19 },
            { 13, 23 }, { 14, 15 }, { 14, 16 }, { 14, 18 }, { 14, 19 }, { 14, 20 }, { 14, 24 },
            { 15, 16 }, { 15, 17 }, { 15, 19 }, { 15, 20 }, { 15, 21 }, { 16, 17 }, { 16, 18 },
            { 16, 20 }, { 16, 21 }, { 16, 22 }, { 17, 18 }, { 17, 19 }, { 17, 21 }, { 17, 22 },
            { 17, 23 }, { 18, 19 }, { 18, 20 }, { 18, 22 }, { 18, 23 }, { 18, 24 }, { 19, 20 },
            { 19, 21 }, { 19, 23 }, { 19, 24 }, { 20, 21 }, { 20, 22 }, { 20, 24 }, { 21, 22 },
            { 21, 23 }, { 22, 23 }, { 22, 24 }, { 23, 24 }, { 0, 12 }, { 2, 5 }, { 3, 23 },
            { 3, 22 }, { 4, 22 }, { 5, 22 }, { 8, 11 }, { 13, 16 }, { 14, 2 }, { 15, 12 },
            { 21, 7 }, { 22, 19 }, { 23, 2 } };

        assertEquals(25, g.vertexSet().size());
        for (int[] e : edges) {
            assertTrue(g.containsEdge(e[0], e[1]));
        }
        assertEquals(edges.length, g.edgeSet().size());
    }

    @Test
    public void testDirected()
    {
        final long seed = 5;

        GraphGenerator<Integer, DefaultEdge, Integer> gen =
            new KleinbergSmallWorldGraphGenerator<>(5, 2, 3, 2, seed);
        Graph<Integer, DefaultEdge> g = new SimpleDirectedGraph<>(DefaultEdge.class);
        gen.generateGraph(g, new IntegerVertexFactory(), null);

        int[][] edges = { { 0, 1 }, { 0, 2 }, { 0, 4 }, { 0, 5 }, { 0, 6 }, { 0, 10 }, { 1, 0 },
            { 1, 2 }, { 1, 3 }, { 1, 5 }, { 1, 6 }, { 1, 7 }, { 1, 11 }, { 2, 0 }, { 2, 1 },
            { 2, 3 }, { 2, 4 }, { 2, 6 }, { 2, 7 }, { 2, 8 }, { 2, 12 }, { 3, 1 }, { 3, 2 },
            { 3, 4 }, { 3, 5 }, { 3, 7 }, { 3, 8 }, { 3, 9 }, { 3, 13 }, { 4, 0 }, { 4, 2 },
            { 4, 3 }, { 4, 5 }, { 4, 6 }, { 4, 8 }, { 4, 9 }, { 4, 10 }, { 4, 14 }, { 5, 0 },
            { 5, 1 }, { 5, 3 }, { 5, 4 }, { 5, 6 }, { 5, 7 }, { 5, 9 }, { 5, 10 }, { 5, 11 },
            { 5, 15 }, { 6, 0 }, { 6, 1 }, { 6, 2 }, { 6, 4 }, { 6, 5 }, { 6, 7 }, { 6, 8 },
            { 6, 10 }, { 6, 11 }, { 6, 12 }, { 6, 16 }, { 7, 1 }, { 7, 2 }, { 7, 3 }, { 7, 5 },
            { 7, 6 }, { 7, 8 }, { 7, 9 }, { 7, 11 }, { 7, 12 }, { 7, 13 }, { 7, 17 }, { 8, 2 },
            { 8, 3 }, { 8, 4 }, { 8, 6 }, { 8, 7 }, { 8, 9 }, { 8, 10 }, { 8, 12 }, { 8, 13 },
            { 8, 14 }, { 8, 18 }, { 9, 3 }, { 9, 4 }, { 9, 5 }, { 9, 7 }, { 9, 8 }, { 9, 10 },
            { 9, 11 }, { 9, 13 }, { 9, 14 }, { 9, 15 }, { 9, 19 }, { 10, 0 }, { 10, 4 }, { 10, 5 },
            { 10, 6 }, { 10, 8 }, { 10, 9 }, { 10, 11 }, { 10, 12 }, { 10, 14 }, { 10, 15 },
            { 10, 16 }, { 10, 20 }, { 11, 1 }, { 11, 5 }, { 11, 6 }, { 11, 7 }, { 11, 9 },
            { 11, 10 }, { 11, 12 }, { 11, 13 }, { 11, 15 }, { 11, 16 }, { 11, 17 }, { 11, 21 },
            { 12, 2 }, { 12, 6 }, { 12, 7 }, { 12, 8 }, { 12, 10 }, { 12, 11 }, { 12, 13 },
            { 12, 14 }, { 12, 16 }, { 12, 17 }, { 12, 18 }, { 12, 22 }, { 13, 3 }, { 13, 7 },
            { 13, 8 }, { 13, 9 }, { 13, 11 }, { 13, 12 }, { 13, 14 }, { 13, 15 }, { 13, 17 },
            { 13, 18 }, { 13, 19 }, { 13, 23 }, { 14, 4 }, { 14, 8 }, { 14, 9 }, { 14, 10 },
            { 14, 12 }, { 14, 13 }, { 14, 15 }, { 14, 16 }, { 14, 18 }, { 14, 19 }, { 14, 20 },
            { 14, 24 }, { 15, 5 }, { 15, 9 }, { 15, 10 }, { 15, 11 }, { 15, 13 }, { 15, 14 },
            { 15, 16 }, { 15, 17 }, { 15, 19 }, { 15, 20 }, { 15, 21 }, { 16, 6 }, { 16, 10 },
            { 16, 11 }, { 16, 12 }, { 16, 14 }, { 16, 15 }, { 16, 17 }, { 16, 18 }, { 16, 20 },
            { 16, 21 }, { 16, 22 }, { 17, 7 }, { 17, 11 }, { 17, 12 }, { 17, 13 }, { 17, 15 },
            { 17, 16 }, { 17, 18 }, { 17, 19 }, { 17, 21 }, { 17, 22 }, { 17, 23 }, { 18, 8 },
            { 18, 12 }, { 18, 13 }, { 18, 14 }, { 18, 16 }, { 18, 17 }, { 18, 19 }, { 18, 20 },
            { 18, 22 }, { 18, 23 }, { 18, 24 }, { 19, 9 }, { 19, 13 }, { 19, 14 }, { 19, 15 },
            { 19, 17 }, { 19, 18 }, { 19, 20 }, { 19, 21 }, { 19, 23 }, { 19, 24 }, { 20, 10 },
            { 20, 14 }, { 20, 15 }, { 20, 16 }, { 20, 18 }, { 20, 19 }, { 20, 21 }, { 20, 22 },
            { 20, 24 }, { 21, 11 }, { 21, 15 }, { 21, 16 }, { 21, 17 }, { 21, 19 }, { 21, 20 },
            { 21, 22 }, { 21, 23 }, { 22, 12 }, { 22, 16 }, { 22, 17 }, { 22, 18 }, { 22, 20 },
            { 22, 21 }, { 22, 23 }, { 22, 24 }, { 23, 13 }, { 23, 17 }, { 23, 18 }, { 23, 19 },
            { 23, 21 }, { 23, 22 }, { 23, 24 }, { 24, 14 }, { 24, 18 }, { 24, 19 }, { 24, 20 },
            { 24, 22 }, { 24, 23 }, { 0, 12 }, { 2, 5 }, { 3, 23 }, { 3, 22 }, { 4, 22 }, { 5, 22 },
            { 8, 11 }, { 13, 16 }, { 14, 2 }, { 15, 12 }, { 21, 7 }, { 22, 19 }, { 23, 2 } };

        assertEquals(25, g.vertexSet().size());
        for (int[] e : edges) {
            assertTrue(g.containsEdge(e[0], e[1]));
        }
        assertEquals(edges.length, g.edgeSet().size());

    }

    @Test
    public void testDirectedWithUniform()
    {
        final long seed = 5;

        GraphGenerator<Integer, DefaultEdge, Integer> gen =
            new KleinbergSmallWorldGraphGenerator<>(5, 2, 3, 0, seed);
        Graph<Integer, DefaultEdge> g = new SimpleDirectedGraph<>(DefaultEdge.class);
        gen.generateGraph(g, new IntegerVertexFactory(), null);

        int[][] edges = { { 0, 1 }, { 0, 2 }, { 0, 4 }, { 0, 5 }, { 0, 6 }, { 0, 10 }, { 1, 0 },
            { 1, 2 }, { 1, 3 }, { 1, 5 }, { 1, 6 }, { 1, 7 }, { 1, 11 }, { 2, 0 }, { 2, 1 },
            { 2, 3 }, { 2, 4 }, { 2, 6 }, { 2, 7 }, { 2, 8 }, { 2, 12 }, { 3, 1 }, { 3, 2 },
            { 3, 4 }, { 3, 5 }, { 3, 7 }, { 3, 8 }, { 3, 9 }, { 3, 13 }, { 4, 0 }, { 4, 2 },
            { 4, 3 }, { 4, 5 }, { 4, 6 }, { 4, 8 }, { 4, 9 }, { 4, 10 }, { 4, 14 }, { 5, 0 },
            { 5, 1 }, { 5, 3 }, { 5, 4 }, { 5, 6 }, { 5, 7 }, { 5, 9 }, { 5, 10 }, { 5, 11 },
            { 5, 15 }, { 6, 0 }, { 6, 1 }, { 6, 2 }, { 6, 4 }, { 6, 5 }, { 6, 7 }, { 6, 8 },
            { 6, 10 }, { 6, 11 }, { 6, 12 }, { 6, 16 }, { 7, 1 }, { 7, 2 }, { 7, 3 }, { 7, 5 },
            { 7, 6 }, { 7, 8 }, { 7, 9 }, { 7, 11 }, { 7, 12 }, { 7, 13 }, { 7, 17 }, { 8, 2 },
            { 8, 3 }, { 8, 4 }, { 8, 6 }, { 8, 7 }, { 8, 9 }, { 8, 10 }, { 8, 12 }, { 8, 13 },
            { 8, 14 }, { 8, 18 }, { 9, 3 }, { 9, 4 }, { 9, 5 }, { 9, 7 }, { 9, 8 }, { 9, 10 },
            { 9, 11 }, { 9, 13 }, { 9, 14 }, { 9, 15 }, { 9, 19 }, { 10, 0 }, { 10, 4 }, { 10, 5 },
            { 10, 6 }, { 10, 8 }, { 10, 9 }, { 10, 11 }, { 10, 12 }, { 10, 14 }, { 10, 15 },
            { 10, 16 }, { 10, 20 }, { 11, 1 }, { 11, 5 }, { 11, 6 }, { 11, 7 }, { 11, 9 },
            { 11, 10 }, { 11, 12 }, { 11, 13 }, { 11, 15 }, { 11, 16 }, { 11, 17 }, { 11, 21 },
            { 12, 2 }, { 12, 6 }, { 12, 7 }, { 12, 8 }, { 12, 10 }, { 12, 11 }, { 12, 13 },
            { 12, 14 }, { 12, 16 }, { 12, 17 }, { 12, 18 }, { 12, 22 }, { 13, 3 }, { 13, 7 },
            { 13, 8 }, { 13, 9 }, { 13, 11 }, { 13, 12 }, { 13, 14 }, { 13, 15 }, { 13, 17 },
            { 13, 18 }, { 13, 19 }, { 13, 23 }, { 14, 4 }, { 14, 8 }, { 14, 9 }, { 14, 10 },
            { 14, 12 }, { 14, 13 }, { 14, 15 }, { 14, 16 }, { 14, 18 }, { 14, 19 }, { 14, 20 },
            { 14, 24 }, { 15, 5 }, { 15, 9 }, { 15, 10 }, { 15, 11 }, { 15, 13 }, { 15, 14 },
            { 15, 16 }, { 15, 17 }, { 15, 19 }, { 15, 20 }, { 15, 21 }, { 16, 6 }, { 16, 10 },
            { 16, 11 }, { 16, 12 }, { 16, 14 }, { 16, 15 }, { 16, 17 }, { 16, 18 }, { 16, 20 },
            { 16, 21 }, { 16, 22 }, { 17, 7 }, { 17, 11 }, { 17, 12 }, { 17, 13 }, { 17, 15 },
            { 17, 16 }, { 17, 18 }, { 17, 19 }, { 17, 21 }, { 17, 22 }, { 17, 23 }, { 18, 8 },
            { 18, 12 }, { 18, 13 }, { 18, 14 }, { 18, 16 }, { 18, 17 }, { 18, 19 }, { 18, 20 },
            { 18, 22 }, { 18, 23 }, { 18, 24 }, { 19, 9 }, { 19, 13 }, { 19, 14 }, { 19, 15 },
            { 19, 17 }, { 19, 18 }, { 19, 20 }, { 19, 21 }, { 19, 23 }, { 19, 24 }, { 20, 10 },
            { 20, 14 }, { 20, 15 }, { 20, 16 }, { 20, 18 }, { 20, 19 }, { 20, 21 }, { 20, 22 },
            { 20, 24 }, { 21, 11 }, { 21, 15 }, { 21, 16 }, { 21, 17 }, { 21, 19 }, { 21, 20 },
            { 21, 22 }, { 21, 23 }, { 22, 12 }, { 22, 16 }, { 22, 17 }, { 22, 18 }, { 22, 20 },
            { 22, 21 }, { 22, 23 }, { 22, 24 }, { 23, 13 }, { 23, 17 }, { 23, 18 }, { 23, 19 },
            { 23, 21 }, { 23, 22 }, { 23, 24 }, { 24, 14 }, { 24, 18 }, { 24, 19 }, { 24, 20 },
            { 24, 22 }, { 24, 23 }, { 0, 18 }, { 0, 12 }, { 1, 16 }, { 2, 5 }, { 2, 17 }, { 3, 23 },
            { 3, 21 }, { 4, 22 }, { 5, 23 }, { 5, 22 }, { 6, 24 }, { 6, 13 }, { 8, 11 }, { 8, 24 },
            { 9, 17 }, { 11, 4 }, { 11, 0 }, { 12, 19 }, { 13, 16 }, { 13, 5 }, { 14, 23 },
            { 14, 2 }, { 15, 12 }, { 16, 19 }, { 16, 4 }, { 16, 0 }, { 17, 4 }, { 17, 2 },
            { 18, 0 }, { 19, 0 }, { 20, 7 }, { 21, 13 }, { 21, 7 }, { 21, 0 }, { 22, 8 }, { 23, 1 },
            { 23, 2 }, { 24, 4 } };

        assertEquals(25, g.vertexSet().size());
        for (int[] e : edges) {
            assertTrue(g.containsEdge(e[0], e[1]));
        }
        assertEquals(edges.length, g.edgeSet().size());
    }

}
